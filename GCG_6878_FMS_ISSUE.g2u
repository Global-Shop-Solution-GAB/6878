Program.Sub.ScreenSU.Start
Gui.Form..Create(BaseForm)
Gui.Form..Caption("GCG 6878 FMS ISSUE")
Gui.Form..Size(1022,578)
Gui.Form..MinX(0)
Gui.Form..MinY(0)
Gui.Form..Position(0,0)
Gui.Form..AlwaysOnTop(False)
Gui.Form..FontName("Tahoma")
Gui.Form..FontSize(8.25)
Gui.Form..ControlBox(True)
Gui.Form..MaxButton(True)
Gui.Form..MinButton(True)
Gui.Form..MousePointer(0)
Gui.Form..Moveable(True)
Gui.Form..Sizeable(True)
Gui.Form..ShowInTaskBar(True)
Gui.Form..TitleBar(True)
Gui.Form..Event(UnLoad,Form_UnLoad)
Gui.Form.GsGcDisplay.Create(GsGridControl)
Gui.Form.GsGcDisplay.Enabled(True)
Gui.Form.GsGcDisplay.Visible(True)
Gui.Form.GsGcDisplay.Zorder(0)
Gui.Form.GsGcDisplay.Size(1007,501)
Gui.Form.GsGcDisplay.Position(10,39)
Gui.Form.GsGcDisplay.Anchor(15)
Gui.Form.GsGcDisplay.Event(RowCellClick,GsGcDisplay_RowCellClick)
Gui.Form.GsGcDisplay.Event(ColumnFilterChanged,GsGcDisplay_ColumnFilterChanged)
Gui.Form.cmdRefresh.Create(Button)
Gui.Form.cmdRefresh.Enabled(True)
Gui.Form.cmdRefresh.Visible(True)
Gui.Form.cmdRefresh.Zorder(0)
Gui.Form.cmdRefresh.Size(75,23)
Gui.Form.cmdRefresh.Position(9,7)
Gui.Form.cmdRefresh.Caption("Refresh")
Gui.Form.cmdRefresh.FontName("Tahoma")
Gui.Form.cmdRefresh.FontSize(8.25)
Gui.Form.cmdRefresh.Event(Click,cmdRefresh_Click)
Gui.Form.cmdIssue.Create(Button)
Gui.Form.cmdIssue.Enabled(True)
Gui.Form.cmdIssue.Visible(True)
Gui.Form.cmdIssue.Zorder(0)
Gui.Form.cmdIssue.Size(75,23)
Gui.Form.cmdIssue.Position(943,6)
Gui.Form.cmdIssue.Caption("Issue")
Gui.Form.cmdIssue.FontName("Tahoma")
Gui.Form.cmdIssue.FontSize(8.25)
Gui.Form.cmdIssue.Event(Click,cmdIssue_Click)
Gui.Form.cmdIssue.Anchor(9)
Gui.Form.chk1.Create(CheckBox)
Gui.Form.chk1.Enabled(True)
Gui.Form.chk1.Visible(True)
Gui.Form.chk1.Zorder(0)
Gui.Form.chk1.Size(85,20)
Gui.Form.chk1.Position(93,8)
Gui.Form.chk1.Caption("Load Issued")
Gui.Form.chk1.FontName("Tahoma")
Gui.Form.chk1.FontSize(8.25)
Gui.Form.cmdDelete.Create(Button)
Gui.Form.cmdDelete.Enabled(True)
Gui.Form.cmdDelete.Visible(True)
Gui.Form.cmdDelete.Zorder(0)
Gui.Form.cmdDelete.Size(75,23)
Gui.Form.cmdDelete.Position(189,8)
Gui.Form.cmdDelete.Caption("Delete")
Gui.Form.cmdDelete.FontName("Tahoma")
Gui.Form.cmdDelete.FontSize(8.25)
Gui.Form.cmdDelete.Event(Click,cmdDelete_Click)
Gui.Form.cmdFlexSched.Create(Button)
Gui.Form.cmdFlexSched.Enabled(True)
Gui.Form.cmdFlexSched.Visible(True)
Gui.Form.cmdFlexSched.Zorder(0)
Gui.Form.cmdFlexSched.Size(75,23)
Gui.Form.cmdFlexSched.Position(863,6)
Gui.Form.cmdFlexSched.Anchor(9)
Gui.Form.cmdFlexSched.Caption("Flex Sched")
Gui.Form.cmdFlexSched.FontName("Tahoma")
Gui.Form.cmdFlexSched.FontSize(8.25)
Gui.Form.cmdFlexSched.Event(Click,cmdFlexSched_Click)
Gui.F_Delete..Create(BaseForm)
Gui.F_Delete..Caption("Delete Nests")
Gui.F_Delete..Size(252,415)
Gui.F_Delete..MinX(0)
Gui.F_Delete..MinY(0)
Gui.F_Delete..Position(0,0)
Gui.F_Delete..AlwaysOnTop(False)
Gui.F_Delete..FontName("Tahoma")
Gui.F_Delete..FontSize(8.25)
Gui.F_Delete..ControlBox(True)
Gui.F_Delete..MaxButton(False)
Gui.F_Delete..MinButton(False)
Gui.F_Delete..MousePointer(0)
Gui.F_Delete..Moveable(True)
Gui.F_Delete..Sizeable(True)
Gui.F_Delete..ShowInTaskBar(True)
Gui.F_Delete..TitleBar(True)
Gui.F_Delete..Event(UnLoad,F_Delete_UnLoad)
Gui.F_Delete.cmdSelAll.Create(Button)
Gui.F_Delete.cmdSelAll.Enabled(True)
Gui.F_Delete.cmdSelAll.Visible(True)
Gui.F_Delete.cmdSelAll.Zorder(0)
Gui.F_Delete.cmdSelAll.Size(75,23)
Gui.F_Delete.cmdSelAll.Position(4,5)
Gui.F_Delete.cmdSelAll.Caption("Select All")
Gui.F_Delete.cmdSelAll.FontName("Tahoma")
Gui.F_Delete.cmdSelAll.FontSize(8.25)
Gui.F_Delete.cmdSelAll.Event(Click,cmdSelAll_Click)
Gui.F_Delete.cmdSelFil.Create(Button)
Gui.F_Delete.cmdSelFil.Enabled(True)
Gui.F_Delete.cmdSelFil.Visible(True)
Gui.F_Delete.cmdSelFil.Zorder(0)
Gui.F_Delete.cmdSelFil.Size(75,23)
Gui.F_Delete.cmdSelFil.Position(172,5)
Gui.F_Delete.cmdSelFil.Caption("Select Filtered")
Gui.F_Delete.cmdSelFil.FontName("Tahoma")
Gui.F_Delete.cmdSelFil.FontSize(8.25)
Gui.F_Delete.cmdSelFil.Anchor(9)
Gui.F_Delete.cmdSelFil.Event(Click,cmdSelFil_Click)
Gui.F_Delete.cmdDelete.Create(Button)
Gui.F_Delete.cmdDelete.Enabled(True)
Gui.F_Delete.cmdDelete.Visible(True)
Gui.F_Delete.cmdDelete.Zorder(0)
Gui.F_Delete.cmdDelete.Size(252,51)
Gui.F_Delete.cmdDelete.Position(0,334)
Gui.F_Delete.cmdDelete.Caption("Delete")
Gui.F_Delete.cmdDelete.FontName("Tahoma")
Gui.F_Delete.cmdDelete.FontSize(8.25)
Gui.F_Delete.cmdDelete.Dock(2)
Gui.F_Delete.cmdDelete.Event(Click,cmdDelete_Click1)
Gui.F_Delete.GsGcDelete.Create(GsGridControl)
Gui.F_Delete.GsGcDelete.Enabled(True)
Gui.F_Delete.GsGcDelete.Visible(True)
Gui.F_Delete.GsGcDelete.Zorder(0)
Gui.F_Delete.GsGcDelete.Size(240,292)
Gui.F_Delete.GsGcDelete.Position(7,34)
Gui.F_Delete.GsGcDelete.Anchor(15)
Gui.F_Delete.GsGcDelete.Event(ColumnFilterChanged,GsGcDelete_ColumnFilterChanged)
Gui.F_Delete.GsGcDelete.Event(RowCellClick,GsGcDelete_RowCellClick)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
Program.External.Include.Library("450101.lib")

Program.External.Include.Library("6000.lib")
Program.External.Include.Library("900300.lib")

V.Global.sFilter.Declare
v.Global.sFilterDelete.Declare
v.Global.bAll.Declare
v.Global.bFill.Declare
Program.Sub.Preflight.End

Program.Sub.Main.Start
'Author: Alejandro Anazco V.
'7/22/2022
'Programmed for PTNW
'Purpose: Select FMS Material to be issue to Work Order after Nesting. 
'			The FMS Material come from Cusotm Table where it is stored, and it holds the recommended amount to issue in pounds.
V.Local.sScriptbuttons.Declare

Function.Intrinsic.UI.UsePixels ' Allows you to use Pixels instead of Twips throughout

f.Intrinsic.Control.Try
	f.Intrinsic.Control.If(v.Caller.Hook, =,49710)
		'49710 - .Net Populate
		V.Local.sScriptbuttons.Set(V.passed.MainFormView-windowsUIButtonPanel-1)
		'This way keeps any other changes to Script Buttons.
		F.Intrinsic.String.Replace(V.Local.sScriptButtons,"Script 1", "FMS ISSUE", V.Local.sScriptButtons)
		V.Passed.MainFormView-windowsUIButtonPanel-1.Set(V.Local.sScriptButtons)
		F.Intrinsic.Control.End		
	f.Intrinsic.Control.Else
		'49760 - .Net Script 1
		'Menu Item
		f.Intrinsic.Control.CallSub("Display")
	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.cmdRefresh_Click.Start
f.Intrinsic.Control.Try
'refreshes the data in the Grid from custom table.
'make this subroutine to work as an load data subroutine as well.
	f.Intrinsic.UI.InvokeWaitDialog("Loading Data")
	f.ODBC.Connection!con.OpenCompanyConnection
		f.Intrinsic.Control.If(v.Screen.Form!chk1.Value, =, 1)
			f.Data.Datatable.CreateFromSQL("loadDT", "con", "Select * from GCG_6878_FMS_NEST")
		f.Intrinsic.Control.Else
			'f.Data.Datatable.CreateFromSQL("loadDT", "con", "Select * from GCG_6878_FMS_NEST where Issued <> 'Y' and Rtrim(FlexID) = ''")
			f.Data.Datatable.CreateFromSQL("loadDT", "con", "Select * from GCG_6878_FMS_NEST where Issued <> 'Y' ")
		f.Intrinsic.Control.EndIf
		
	f.ODBC.Connection!con.Close
	
	f.Data.Datatable.DeleteRow("displayDT")
	f.Data.Datatable.AcceptChanges("displayDT")
	f.Data.Datatable.Merge("loadDT", "displayDT", false, 2)
	f.Data.Datatable.AcceptChanges("displayDT")
	f.Data.Datatable.Close("loadDT")
	
	f.Intrinsic.UI.CloseWaitDialog
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.cmdRefresh_Click.End

Program.Sub.cmdIssue_Click.Start
f.Intrinsic.Control.Try
'check if rows are selected.
'build a save table with the selected rows for updating custom table.
'build Issue File for callwrapper.
'Run stand alone issue.
'Update issued rows into the custom table, updating quantity issued and issue flag.

v.Local.iCnt.Declare
v.Local.sSeq.Declare

v.Local.sReceiptLine.Declare
v.Local.sText.Declare
v.Local.sFilePath.Declare

v.Local.sPart.Declare
v.Local.sRev.Declare
v.Local.sCost.Declare
v.Local.sBin.Declare
v.Local.sTotalWeight.Declare
v.Local.sDateTD.Declare
v.Local.iIncrement.Declare
V.Local.sIncrement.Declare
v.Local.sScheduleNumber.Declare

v.Local.sLoc.Declare
v.Local.sPartFull.Declare
V.Local.sWorkCenter.Declare
V.Local.sMSeq.Declare

v.Local.sSQLb.Declare
v.Local.iRet.Declare

v.Local.fOnhand.Declare

f.Intrinsic.Control.BlockEvents
'Check dv is closed.
f.Intrinsic.Control.If(v.DataView.displayDT!dvSelected.Exists)
	f.Data.DataView.Close("displayDT", "dvSelected")
f.Intrinsic.Control.EndIf

f.Intrinsic.Control.If(v.DataView.displayDT!dvSCheckIssue.Exists)
	f.Data.DataView.Close("displayDT", "dvSCheckIssue")
f.Intrinsic.Control.EndIf
'Create DV sloc
f.Data.Datatable.AcceptChanges("displayDT")

f.Data.DataView.Create("displayDT", "dvSCheckIssue", 22, "SelectCol = 'True' and Bin <> '' and Issued = 'Y'", )
f.Intrinsic.Control.If(v.DataView.displayDT!dvSCheckIssue.RowCount, >, 1)
	f.Intrinsic.Control.UnBlockEvents
	f.Intrinsic.UI.Msgbox("Rows selected have lines that have already being issued. Do you wish to continue?")
	'f.Intrinsic.Control.If(v.Local.iRet, <>, 6)
	f.Intrinsic.Control.ExitSub
	'f.Intrinsic.Control.EndIf	
f.Intrinsic.Control.EndIf

f.Data.DataView.Create("displayDT", "dvSelected", 22, "SelectCol = 'True' and Bin <> ''", )
f.Intrinsic.Control.If(v.DataView.displayDT!dvSelected.RowCount, <, 1)
	f.Intrinsic.Control.UnBlockEvents
	f.Intrinsic.UI.Msgbox("Select Rows to issue")
	f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.EndIf
'Close Seq Prep
f.Data.DataTable.Create("dtCloseSeq")
f.Data.DataTable.AddColumn("dtCloseSeq", "WO", "String")
f.Data.DataTable.AddColumn("dtCloseSeq", "Sux", "String")
f.Data.DataTable.AddColumn("dtCloseSeq", "Seq", "String")
f.Intrinsic.String.Format(v.Ambient.Date, "YYYYMMDD", v.Local.sDateTD)
'F.Intrinsic.Control.CallSub(GetNextFlexSchedule)
'V.Local.sScheduleNumber.Set(V.Args.Schedule)
'Get Material line on each wo-suff
f.ODBC.Connection!con.OpenCompanyConnection
 	f.Intrinsic.Control.For(v.Local.iCnt, 0, v.DataView.displayDT!dvSelected.RowCount--, 1)
 	'v.Local.sPart.Set()
		f.Intrinsic.String.RPad(v.DataView.displayDT!dvSelected(v.Local.iCnt).Material!FieldValTrim, " ", 20, v.Local.sPartFull)
		f.Intrinsic.String.Right(v.Local.sPartFull, 3, v.Local.sRev)
		f.Intrinsic.String.Left(v.Local.sPartFull, 17, v.Local.sPart)
 		'Add increment
		F.Intrinsic.Math.Add(V.Local.iIncrement.long,1,V.Local.iIncrement)
		F.Intrinsic.String.Format(V.Local.iIncrement,"000000",V.Local.sIncrement)
		'f.Data.DataView.SetValue("displayDT", "dvSelected", -1, "FlexID", v.Local.sScheduleNumber)
		'Get Mat Seq
		f.Intrinsic.String.Build("Select top 1 seq from V_job_Operations where job = '{0}' and suffix = '{1}' and seq < '{2}' and LMO = 'M' order by seq desc", v.DataView.displayDT!dvSelected(v.Local.iCnt).Job!FieldValTrim, v.DataView.displayDT!dvSelected(v.Local.iCnt).Suffix!FieldValTrim, v.DataView.displayDT!dvSelected(v.Local.iCnt).Seq!FieldValTrim, v.Local.sSQLb)
		f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQLb, v.Local.sSeq)
		f.Intrinsic.String.Build("Select top 1 Part from V_job_Operations where job = '{0}' and suffix = '{1}' and seq = '{2}' order by seq desc", v.DataView.displayDT!dvSelected(v.Local.iCnt).Job!FieldValTrim, v.DataView.displayDT!dvSelected(v.Local.iCnt).Suffix!FieldValTrim, v.DataView.displayDT!dvSelected(v.Local.iCnt).Seq!FieldValTrim, v.Local.sSQLb)
		f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQLb, v.Local.sWorkCenter)
		'Get Cost 
		f.Intrinsic.String.Build("Select top 1 amt_Cost from Inventory_Mstr where Part = '{0}'",  v.Local.sPartFull, v.Local.sSQLb)
		f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQLb, v.Local.sCost)
		'Check Qty On Hand
		f.Intrinsic.String.Build("select QTY_Onhand from V_Inventory_All where Part = '{0}'", v.Local.sPartFull, v.Local.sSQLb)
		f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQLb, v.Local.fOnhand)
		
		'Get Cost 
		v.Local.sBin.Set(v.DataView.displayDT!dvSelected(v.Local.iCnt).Bin!FieldValTrim)
		'Check is not empty
		f.Intrinsic.Control.If(v.Local.sSeq.Trim, =, "")
			f.Intrinsic.String.Build("The selected Job-Suffix-Seq ({0}-{1}-{2}). Can not find a material.", v.DataView.displayDT!dvSelected(v.Local.iCnt).Job!FieldValTrim, v.DataView.displayDT!dvSelected(v.Local.iCnt).Suffix!FieldValTrim, v.DataView.displayDT!dvSelected(v.Local.iCnt).Seq!FieldValTrim, v.Local.sSQLb)
			f.Intrinsic.UI.Msgbox(v.Local.sSQLb)
			f.Intrinsic.Control.GoTo("Next")
		f.Intrinsic.Control.EndIf
		'Build Issue
		'Part
'		'v.Local.sPart.Set()
'		f.Intrinsic.String.RPad(v.DataView.displayDT!dvSelected(v.Local.iCnt).Material!FieldValTrim, " ", 20, v.Local.sPartFull)
'		f.Intrinsic.String.Right(v.Local.sPartFull, 3, v.Local.sRev)
'		f.Intrinsic.String.Left(v.Local.sPartFull, 17, v.Local.sPart)
		'Total Weight
		'f.Intrinsic.String.Format(v.DataView.displayDT!dvSelected(v.Local.iCnt).totalWeight!FieldValTrim, "0.0", v.Local.sTotalWeight)
		v.Local.sTotalWeight.Set(v.DataView.displayDT!dvSelected(v.Local.iCnt).totalWeight!FieldValTrim)
		f.Intrinsic.Control.If(v.Local.fOnhand, >=, v.Local.sTotalWeight.Float)
			'Issue Material
			f.Data.Datatable.AddRow("450101", "Part", v.Local.sPart, "Rev", v.Local.sRev, "Location", "  ", "Quantity", v.Local.sTotalWeight, "WONumber", v.DataView.displayDT!dvSelected(v.Local.iCnt).Job!FieldValTrim, "WOSuffix", v.DataView.displayDT!dvSelected(v.Local.iCnt).Suffix!FieldValTrim, "WOSeq", v.Local.sSeq, "Bin", v.Local.sBin, "Heat", v.DataView.displayDT!dvSelected(v.Local.iCnt).Heat!FieldValTrim, "Lot", v.DataView.displayDT!dvSelected(v.Local.iCnt).Lot!FieldValTrim)
			'Change Flag
			f.Data.DataView.SetValue("displayDT", "dvSelected", v.Local.iCnt, "Issued", "Y", "Issue_Date", v.Ambient.Date)
		f.Intrinsic.Control.Else
			f.Intrinsic.String.Build("Part: {0} does not have enough QTY on hand, No Material was Issued on Workorder: {1}-{2}.{3}Please contact Management.", v.Local.sPart, v.DataView.displayDT!dvSelected(v.Local.iCnt).Job!FieldValTrim, v.DataView.displayDT!dvSelected(v.Local.iCnt).Suffix!FieldValTrim, v.Ambient.NewLine, v.Local.sText)
			f.Intrinsic.UI.Msgbox(v.Local.sText)
		f.Intrinsic.Control.EndIf
		'Issue Material
		f.Intrinsic.Control.Label("Next")
		'Queue Close Seq
		f.Data.DataTable.AddRow("dtCloseSeq", "WO", v.DataView.displayDT!dvSelected(v.Local.iCnt).Job!FieldValTrim, "Sux", v.DataView.displayDT!dvSelected(v.Local.iCnt).Suffix!FieldValTrim, "Seq", v.Local.sSeq)
		'cHANGE fLAG
				
		'Add Flex Schedule
		'f.Intrinsic.String.Build("{0}{1}", v.Local.sPart, v.Local.sRev, v.Local.sPartFull)
		'F.Data.DataTable.AddRow("6000", "SchedNumber", V.Local.sScheduleNumber, "SchedIncrement", V.Local.sIncrement, "MatWO", v.DataView.displayDT!dvSelected(v.Local.iCnt).Job!FieldValTrim, "MatSuff", v.DataView.displayDT!dvSelected(v.Local.iCnt).Suffix!FieldValTrim, "MatSeq", V.Local.sSeq, "LabWO", v.DataView.displayDT!dvSelected(v.Local.iCnt).Job!FieldValTrim, "LabSuff", v.DataView.displayDT!dvSelected(v.Local.iCnt).Suffix!FieldValTrim, "LabSeq", v.DataView.displayDT!dvSelected(v.Local.iCnt).Seq!FieldValTrim, "LabWorkCenter", V.Local.sWorkCenter, "LabWOPart", V.Local.sPartFull, "LabWOLoc", V.Local.sLoc, "SchedFromDate", V.Ambient.Date.FormatMMDDYY)
		
	f.Intrinsic.Control.Next(v.Local.iCnt)
	
'	f.Intrinsic.String.Build("{0}\ISSREC.txt", v.Caller.FilesDir, v.Local.sFilePath)
'	f.Intrinsic.File.String2File(v.Local.sFilePath, v.Local.sText)
'	
'	f.Global.Callwrapper.New("IssueReceipt", "Inventory.StandAloneIssueReceipts")
'	f.Global.Callwrapper.SetProperty("IssueReceipt", "FileName", "ISSREC.txt")
'	f.Global.Callwrapper.Run("IssueReceipt")
'	f.Intrinsic.File.DeleteFile(v.Local.sFilePath)
	
	f.Intrinsic.Control.CallSub(450101Sync)
	'upload
	'F.Intrinsic.Control.CallSub(6000Sync)
	
	'F.Intrinsic.Control.CallSub(UpdateLastScheduleNumber, "SCHEDULE", V.Local.sScheduleNumber)
	
	'F.Data.DataTable.AddRow("900300", "StartDate", "000000", "EndDate", "000000", "StartFSNum", V.Local.sScheduleNumber, "StartFSSuffix", "000", "EndFSNum", V.Local.sScheduleNumber, "EndFSSuffix", "000", "ShowMatl", "Y", "UseExtBarcode", "Y")
	'F.Intrinsic.Control.CallSub(900300Sync)
	
	'f.Intrinsic.UI.Sleep(10)
	'
	'Change save to only affected 
	f.Data.DataView.ToDataTable("displayDT", "dvSelected", "saveDT")
	f.Data.Datatable.RemoveColumn("saveDT", "SelectCol")	
	f.Data.Datatable.SaveToDB("saveDT", "con", "GCG_6878_FMS_NEST", "Job*!*Suffix*!*Seq*!*NestID", 256)
	
	'Close Sequences
	f.Intrinsic.Control.For(v.Local.iCnt, 0, v.DataTable.dtCloseSeq.RowCount--, 1)
		F.Global.Callwrapper.New("Test","Manufacturing.CloseWorkOrderSequence")
		F.Global.Callwrapper.SetProperty("Test","BeginningWorkOrder", v.DataTable.dtCloseSeq(v.Local.iCnt).WO!FieldValTrim)
		F.Global.Callwrapper.SetProperty("Test","BeginningWorkOrderSuffix", v.DataTable.dtCloseSeq(v.Local.iCnt).WO!FieldValTrim)
		F.Global.Callwrapper.SetProperty("Test","WorkOrderSequence", v.DataTable.dtCloseSeq(v.Local.iCnt).WO!FieldValTrim)
		F.Global.Callwrapper.SetProperty("Test","CloseDate", v.Local.sDateTD)
		F.Global.CallWrapper.Run("Test")	
	f.Intrinsic.Control.Next(v.Local.iCnt)
	f.Data.DataTable.Close("dtCloseSeq")
	f.Data.Datatable.Close("saveDT")
f.ODBC.Connection!con.Close
f.Intrinsic.Control.UnBlockEvents
f.Intrinsic.Control.CallSub("cmdRefresh_Click")
f.Intrinsic.UI.Msgbox("Issue Complete")
f.Intrinsic.Control.Catch
	f.ODBC.Connection!con.Close
	f.Intrinsic.Control.UnBlockEvents
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.cmdIssue_Click.End

Program.Sub.createDisplayDT.Start
f.Intrinsic.Control.Try
	'Creeate Display Table
	f.Data.DataTable.Create("displayDT", true)
	'Add Rows to display
	f.Data.Datatable.AddColumn("displayDT", "SelectCol", "Boolean", False)
	f.Data.Datatable.AddColumn("displayDT", "Job", "String")
	f.Data.Datatable.AddColumn("displayDT", "Suffix", "String")
	f.Data.Datatable.AddColumn("displayDT", "Seq", "String")
	f.Data.Datatable.AddColumn("displayDT", "NestID", "String")
	f.Data.Datatable.AddColumn("displayDT", "CutTime", "Float")
	f.Data.Datatable.AddColumn("displayDT", "Material", "String")
	f.Data.Datatable.AddColumn("displayDT", "NamePlate", "String")
	f.Data.Datatable.AddColumn("displayDT", "MatArea", "Float", 0)
	f.Data.Datatable.AddColumn("displayDT", "Area", "Float", 0)
	f.Data.Datatable.AddColumn("displayDT", "cutArea", "Float", 0)
	f.Data.Datatable.AddColumn("displayDT", "CutPercentage", "Float", 0)
	f.Data.Datatable.AddColumn("displayDT", "RemArea", "Float", 0)
	f.Data.Datatable.AddColumn("displayDT", "remAdder", "Float", 0)
	f.Data.Datatable.AddColumn("displayDT", "completeArea", "Float", 0)
	f.Data.Datatable.AddColumn("displayDT", "TotalPercentage", "Float", 0)
	f.Data.Datatable.AddColumn("displayDT", "Weight", "Float", 0)
	f.Data.Datatable.AddColumn("displayDT", "totalWeight", "Float", 0)
	f.Data.Datatable.AddColumn("displayDT", "Issued", "String")
	f.Data.Datatable.AddColumn("displayDT", "Lot", "String")
	f.Data.Datatable.AddColumn("displayDT", "Bin", "String")
	f.Data.Datatable.AddColumn("displayDT", "Heat", "String")
	f.Data.Datatable.AddColumn("displayDT", "Serial", "String")
	f.Data.Datatable.AddColumn("displayDT", "FlexID", "String")
	f.Data.Datatable.AddColumn("displayDT", "Drops", "String")
	f.Data.Datatable.AddColumn("displayDT", "Issue_Date", "Date")
	'Create Griscview from dataview
	f.Data.DataView.Create("displayDT", "displayDV", 22)
	gui.Form.GsGcDisplay.AddGridviewFromDataview("displayGV", "displayDT", "displayDV")
	gui.Form.GsGcDisplay.MainView("displayGV")
	
	'Creeate Display Table
	f.Data.DataTable.Create("deleteDT", true)
	'Add Rows to display
	f.Data.Datatable.AddColumn("deleteDT", "SelectCol", "Boolean", False)
	f.Data.Datatable.AddColumn("deleteDT", "NestID", "String")
	
	f.Data.DataView.Create("deleteDT", "deleteDV", 22)
	gui.F_Delete.GsGcDelete.AddGridviewFromDataview("deleteGV", "deleteDT", "deleteDV")
	gui.F_Delete.GsGcDelete.MainView("deleteGV")
	
	f.Data.DataView.Create("deleteDT", "selectDV", 22, "SelectCol = 'True'", "")
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.createDisplayDT.End

Program.Sub.loadGridProperties.Start
v.Local.iCnt.Declare
v.Local.sFields.Declare
v.Local.iVisibleIndex.Declare

f.Intrinsic.Control.Try
	f.Intrinsic.String.Split(v.DataTable.deleteDT.FieldNames, "*!*", v.Local.sFields)
	f.Intrinsic.Control.For(v.Local.iCnt, 0, v.Local.sFields.UBound, 1)
		gui.F_Delete.GsGcDelete.SetColumnProperty("deleteGV", v.Local.sFields(v.Local.iCnt), "HeaderFontBold", True)
		gui.F_Delete.GsGcDelete.SetColumnProperty("deleteGV", v.Local.sFields(v.Local.iCnt), "Visible", True)
		gui.F_Delete.GsGcDelete.SetColumnProperty("deleteGV", v.Local.sFields(v.Local.iCnt), "ReadOnly", True)
		gui.F_Delete.GsGcDelete.SetColumnProperty("deleteGV", v.Local.sFields(v.Local.iCnt), "AllowEdit", False)
		gui.F_Delete.GsGcDelete.SetColumnProperty("deleteGV", v.Local.sFields(v.Local.iCnt), "HeaderHAlignment", "Near")
		gui.F_Delete.GsGcDelete.SetColumnProperty("deleteGV", v.Local.sFields(v.Local.iCnt), "CellHAlignment", "Near")
		gui.F_Delete.GsGcDelete.SetColumnProperty("deleteGV", v.Local.sFields(v.Local.iCnt), "HeaderBackColor", v.Color.GSS)
		gui.F_Delete.GsGcDelete.SetColumnProperty("deleteGV", v.Local.sFields(v.Local.iCnt), "HeaderForeColor", v.Color.White)
	f.Intrinsic.Control.Next(v.Local.iCnt)
	
	gui.F_Delete.GsGcDelete.BestFitColumns("deleteGV")
	gui.F_Delete.GsGcDelete.SetGridviewProperty("deleteGV", "OptionsViewColumnAutoWidth", False)
	gui.F_Delete.GsGcDelete.SetColumnProperty("deleteGV", "SelectCol", "Caption", " ")
	
	f.Intrinsic.String.Split(v.DataTable.displayDT.FieldNames, "*!*", v.Local.sFields)
	f.Intrinsic.Control.For(v.Local.iCnt, 0, v.Local.sFields.UBound, 1)
		gui.Form.GsGcDisplay.SetColumnProperty("displayGV", v.Local.sFields(v.Local.iCnt), "HeaderFontBold", True)
		gui.Form.GsGcDisplay.SetColumnProperty("displayGV", v.Local.sFields(v.Local.iCnt), "Visible", True)
		gui.Form.GsGcDisplay.SetColumnProperty("displayGV", v.Local.sFields(v.Local.iCnt), "ReadOnly", True)
		gui.Form.GsGcDisplay.SetColumnProperty("displayGV", v.Local.sFields(v.Local.iCnt), "AllowEdit", False)
		gui.Form.GsGcDisplay.SetColumnProperty("displayGV", v.Local.sFields(v.Local.iCnt), "HeaderHAlignment", "Near")
		gui.Form.GsGcDisplay.SetColumnProperty("displayGV", v.Local.sFields(v.Local.iCnt), "CellHAlignment", "Near")
		gui.Form.GsGcDisplay.SetColumnProperty("displayGV", v.Local.sFields(v.Local.iCnt), "HeaderBackColor", v.Color.GSS)
		gui.Form.GsGcDisplay.SetColumnProperty("displayGV", v.Local.sFields(v.Local.iCnt), "HeaderForeColor", v.Color.White)
	f.Intrinsic.Control.Next(v.Local.iCnt)
	
	'GridView Properties
	gui.Form.GsGcDisplay.BestFitColumns("displayGV")
	gui.Form.GsGcDisplay.SetGridviewProperty("displayGV", "OptionsViewColumnAutoWidth", False)
	'gui.Form.GsGcDisplay.SetGridviewProperty("displayGV", "OptionsViewShowAutoFilterRow", True)
	'gui.Form.GsGcDisplay.SetGridviewProperty("displayGV", "OptionsFindAlwaysVisible", True)
	'gui.Form.GsGcDisplay.SetGridviewProperty("displayGV", "Showgrouppanel", True)
	
	'Possible Column Properties 
	'gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "SelectCol", "ReadOnly", False)
	'gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "SelectCol", "AllowEdit", True)
	'gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "Default", "HeaderHAlignment", "Center")
	'gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "Default", "CellHAlignment", "Center")
	'gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "Default", "Caption", "Default")
	'gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "Default", "Visible", False)
	'gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "Default", "DisplayCustomDatetime", "d")
	
	'VisibleIndex
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "SelectCol", "VisibleIndex", v.Local.iVisibleIndex)
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "Job", "VisibleIndex", v.Local.iVisibleIndex.++)
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "Suffix", "VisibleIndex", v.Local.iVisibleIndex.++)
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "Seq", "VisibleIndex", v.Local.iVisibleIndex.++)
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "NestID", "VisibleIndex", v.Local.iVisibleIndex.++)
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "Lot", "VisibleIndex", v.Local.iVisibleIndex.++)
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "Bin", "VisibleIndex", v.Local.iVisibleIndex.++)
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "Heat", "VisibleIndex", v.Local.iVisibleIndex.++)
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "Material", "VisibleIndex", v.Local.iVisibleIndex.++)
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "NamePlate", "VisibleIndex", v.Local.iVisibleIndex.++)
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "MatArea", "VisibleIndex", v.Local.iVisibleIndex.++)
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "Area", "VisibleIndex", v.Local.iVisibleIndex.++)
	
	'Captions
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "SelectCol", "Caption", " ")
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "MatArea", "Caption", "Material Area")
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "Area", "Caption", "Part Area")
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "CutArea", "Caption", "Total Part Area")
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "CutPercentage", "Caption", "% (Material/Part)")
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "RemArea", "Caption", "Total Remanent Area")
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "remAdder", "Caption", "Remanent Proportional")
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "completeArea", "Caption", "Complete Cut Area")
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "TotalPercentage", "Caption", "Total Cut Percentage")
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "Weight", "Caption", "Materail Weight")
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "totalWeight", "Caption", "Total Cut Weight")
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "Issue_Date", "Caption", "Issue Date")
'	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "SelectCol", "Caption", " ")
'	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "SelectCol", "Caption", " ")
'	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "SelectCol", "Caption", " ")

	'CUstom Formating
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "MatArea", "DisplayCustomNumeric", "0.00")
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "Area", "DisplayCustomNumeric", "0.00")
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "CutTime", "DisplayCustomNumeric", "0.00")
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "CutArea", "DisplayCustomNumeric", "0.00")
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "CutPercentage", "DisplayCustomNumeric", "0.00%")
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "RemArea", "DisplayCustomNumeric", "0.00")
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "remAdder", "DisplayCustomNumeric", "0.00")
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "completeArea", "DisplayCustomNumeric", "0.00")
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "TotalPercentage", "DisplayCustomNumeric", "0.00%")
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "Weight", "DisplayCustomNumeric", "0.00")
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "totalWeight", "DisplayCustomNumeric", "0.00")
	gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "Issue_Date", "DisplayCustomDatetime", "d")
	'gui.Form.GsGcDisplay.SetColumnProperty("displayGV", "MatArea", "DisplayCustomNumeric", "0.00")
	'Conditional Formatting
	'gui.Form.GsGcDisplay.AddStyleFormatCondition("displayGV", "columnName", "TagName", "EQUAL", 1)
	'gui.Form.GsGcDisplay.SetStyleFormatConditionProperty("displayGV", "columnName", "TagName", "ApplyToRow", True) 
	'gui.Form.GsGcDisplay.SetStyleFormatConditionProperty("displayGV", "columnName", "TagName", "BackColor", "Color") 
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.loadGridProperties.End

Program.Sub.ErrorMsg.Start
v.Local.sError.Declare

'Generic Error message.
f.Intrinsic.String.Build("Project ProjectName.g2u {0}{0}Subroutine: {1}{0}Error: {2} with Description: {3}", v.Ambient.NewLine, v.Args.CurrentSub, v.Ambient.ErrorNumber, v.Ambient.ErrorDescription, v.Local.sError)
f.Intrinsic.UI.Msgbox(v.Local.sError)
Program.Sub.ErrorMsg.End

Program.Sub.Form_UnLoad.Start
f.Intrinsic.Control.Try
	'End Program
	f.Intrinsic.Control.CallSub("Serialize")
	f.Intrinsic.Control.End
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.Form_UnLoad.End

Program.Sub.GsGcDisplay_RowCellClick.Start
v.Local.sCol.Declare
v.Local.sMat.Declare
v.Local.sRet.Declare
v.Local.sSQLe.Declare
v.Local.bSelect.Declare
f.Intrinsic.Control.Try
	v.Local.sCol.Set(v.Args.Column)
	gui.Form.GsGcDisplay.GetCellValueByColumnName("displayGV", "Material", v.Args.RowIndex, v.Local.sMat)
	f.Intrinsic.Control.If(v.Local.sCol.UCase, =, "LOT")
		f.ODBC.Connection!con.OpenCompanyConnection
			f.Intrinsic.String.Build("Select Part, Lot, Bin, Heat, Serial_Number, Quantity from V_ITEM_MASTER where Part = '{0}'", v.Local.sMat, v.Local.sSQLe)
			f.Intrinsic.UI.Browser("Item", "con", v.Local.sSQLe, "Part*!*Lot*!*Bin*!*Heat*!*SerialNumber*!*Quantity", "80*!*60*!*40*!*60*!*100*!*60", v.Local.sRet)
		f.ODBC.Connection!con.Close
		'Cancel
		f.Intrinsic.Control.If(v.Local.sRet, <>, "***CANCEL***")
			f.Intrinsic.String.Split(v.Local.sRet, "*!*", v.Local.sRet)
			gui.Form.GsGcDisplay.SetCellValueByColumnName("displayGV", "Lot", v.Args.RowIndex, v.Local.sRet(1))
			gui.Form.GsGcDisplay.SetCellValueByColumnName("displayGV", "Bin", v.Args.RowIndex, v.Local.sRet(2))
			gui.Form.GsGcDisplay.SetCellValueByColumnName("displayGV", "Heat", v.Args.RowIndex, v.Local.sRet(3))
			gui.Form.GsGcDisplay.SetCellValueByColumnName("displayGV", "Serial", v.Args.RowIndex, v.Local.sRet(4))
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.ElseIf(v.Local.sCol.UCase, =, "SELECTCOL")
		gui.Form.GsGcDisplay.GetCellValueByColumnName("displayGV", "SELECTCOL", v.Args.RowIndex, v.Local.bSelect)
		gui.Form.GsGcDisplay.SetCellValueByColumnName("displayGV", "SELECTCOL", v.Args.RowIndex, v.Local.bSelect.Not)
	f.Intrinsic.Control.EndIf
	f.Data.DataTable.AcceptChanges("displayDT")
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.GsGcDisplay_RowCellClick.End

Program.Sub.loadContextMenu.Start
f.Intrinsic.Control.Try
	Gui.Form..ContextMenuCreate("displayGV")
	Gui.Form..ContextMenuAddItem("displayGV","SELECTF",0,"Select Filtered Rows")
	Gui.Form..ContextMenuAddItem("displayGV","USELECTF",0,"Deselect Filtered Rows")
	Gui.Form..ContextMenuAddItem("displayGV","SELECT",0,"Select All Rows")
	Gui.Form..ContextMenuAddItem("displayGV","USELECT",0,"Deselect All Rows")
	Gui.Form..ContextMenuSetItemEventHandler("displayGV","SelectF","ContextMenuItemSelection")
	Gui.Form..ContextMenuSetItemEventHandler("displayGV","USelectF","ContextMenuItemSelection")
	Gui.Form..ContextMenuSetItemEventHandler("displayGV","Select","ContextMenuItemSelection")
	Gui.Form..ContextMenuSetItemEventHandler("displayGV","USelect","ContextMenuItemSelection")
	
	F.Intrinsic.Control.If(V.Caller.GSSVersion, >=, "2019.1")
		Gui.Form..ContextMenuAddItem("displayGV","CopyFilter",0,"Copy Grid Filter to Clipboard")
		Gui.Form..ContextMenuSetItemEventHandler("displayGV","CopyFilter","ContextMenuItemSelection")
	F.Intrinsic.Control.EndIf
	
	GUI.Form.GsGcDisplay.ContextMenuAttach("displayGV")
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.loadContextMenu.End

Program.Sub.ContextMenuItemSelection.Start
f.Intrinsic.Control.Try

V.Local.sJobs.Declare(String)
V.Local.sMessage.Declare(String)
V.Local.iRet.Declare(Long)
V.Local.sFilter.Declare(String)
'V.Local.sSQLf.Declare(String)
 
f.Intrinsic.Control.If(v.Args.ItemName,=,"SELECTF")
	F.Intrinsic.Control.CallSub(GridViewFilterToDataViewFilter, "FILTER", V.Global.sFilter)
	f.Data.DataView.Create("displayDT","SetVw",22,V.Args.Filter,"")
	f.Data.DataView.SetValue("displayDT","SetVw",-1,"SelectCol",True)
	f.Data.DataView.Close("displayDT","SetVw")
	'F.Intrinsic.Control.CallSub(LoadTotals, "SELECTED_OVERRIDE", -1)
	
f.Intrinsic.Control.ElseIf(v.Args.ItemName,=,"USELECTF")
	F.Intrinsic.Control.CallSub(GridViewFilterToDataViewFilter, "FILTER", V.Global.sFilter)
	f.Data.DataView.Create("displayDT","SetVw",22,V.Args.Filter,"")
	f.Data.DataView.SetValue("displayDT","SetVw",-1,"SelectCol",False)
	f.Data.DataView.Close("displayDT","SetVw")
	'F.Intrinsic.Control.CallSub(LoadTotals, "SELECTED_OVERRIDE", -1)
	
f.Intrinsic.Control.ElseIf(v.Args.ItemName,=,"SELECT")
	f.Data.DataView.SetValue("displayDT","displayDV",-1,"SelectCol",True)
	'F.Intrinsic.Control.CallSub(LoadTotals, "SELECTED_OVERRIDE", V.DataTable.displayDT.RowCount)

f.Intrinsic.Control.ElseIf(v.Args.ItemName,=,"USELECT")
	f.Data.DataView.SetValue("displayDT","displayDV",-1,"SelectCol",False)
	'F.Intrinsic.Control.CallSub(LoadTotals, "SELECTED_OVERRIDE", 0)
	
F.Intrinsic.Control.ElseIf(V.Args.ItemName, =, "COPYFILTER")
	GUI.Form.GsGcDisplay.FilterToWhereClause("displayGV", V.Local.sFilter)
	F.Intrinsic.UI.SetClipboardText(V.Local.sFilter)
f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.ContextMenuItemSelection.End

Program.Sub.GetNextFlexSchedule.Start
F.Intrinsic.Control.Try

V.Local.sSQLf.Declare(String)
V.Local.sScheduleNumbera.Declare(String)
V.Local.bDone.Declare(Boolean, False)
V.Local.sRet.Declare(String)
f.ODBC.Connection!con.OpenCompanyConnection
 
	F.ODBC.Connection!Con.GetID("V_JOB_CT_FLX_SCHD","SCHEDULE",TRUE,V.Local.sScheduleNumbera)
	F.Intrinsic.Math.Add(V.Local.sScheduleNumbera, 1, V.Local.sScheduleNumbera)
	F.Intrinsic.String.Format(V.Local.sScheduleNumbera,"000000",V.Local.sScheduleNumbera)
	
	F.Intrinsic.Control.DoUntil(V.Local.bDone)
		V.Local.bDone.Set(True)
		
		'check if already a nest with that
		F.Intrinsic.String.Build("select FLEXID from GCG_4980_MAT where FLEXID = '{0}'", V.Local.sScheduleNumbera, V.Local.sSQLf)
		F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQLf, V.Local.sRet)
		F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF.Not)
			V.Local.bDone.Set(False)
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.String.Build("FLEXID = '{0}'", V.Local.sScheduleNumbera, V.Local.sSQLf)
		F.Data.DataTable.Select("DisplayDT", V.Local.sSQLf, V.Local.sRet)
		F.Intrinsic.Control.If(V.Local.sRet.IsNotNoReturn)
			V.Local.bDone.Set(False)
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.If(V.Local.bDone.Not)
			F.Intrinsic.Math.Add(V.Local.sScheduleNumbera, 1, V.Local.sScheduleNumbera)
			F.Intrinsic.String.Format(V.Local.sScheduleNumbera,"000000",V.Local.sScheduleNumbera)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Loop
f.ODBC.Connection!con.Close
F.Intrinsic.Variable.AddRV("SCHEDULE", V.Local.sScheduleNumbera)

F.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.GetNextFlexSchedule.End

Program.Sub.cmdDelete_Click.Start
v.Local.sSQLa.Declare
v.Local.bIsInGroup.Declare
v.Local.sRet.Declare
v.Local.iYes.Declare
f.Intrinsic.Control.Try
'Try something
	f.Global.Security.IsInGroup(v.Caller.User, "PFABFULL", v.Local.bIsInGroup)
	'CHeck if in group
	f.Intrinsic.Control.If(v.Local.bIsInGroup)
		f.ODBC.Connection!con.OpenCompanyConnection
			'Load Nest
			f.Data.DataTable.CreateFromSQL("tmpDT", "con", "Select distinct NestID from GCG_6878_FMS_NEST where Issued <> 'Y'")
			f.Data.DataTable.DeleteRow("deleteDT")
			f.Data.DataTable.AcceptChanges("deleteDT")
			f.Data.DataTable.Merge("tmpDT", "deleteDT", false, 2)
			f.Data.DataTable.Close("tmpDT")
			f.Data.DataTable.AcceptChanges("deleteDT")
'			f.Intrinsic.UI.Browser("Delete NestID", "con", "Select distinct NestID from GCG_6878_FMS_NEST where Issued <> 'Y'", "Nest ID", "120", v.Local.sRet)
'			f.Intrinsic.Control.If(v.Local.sRet.Trim, <>, "***CANCEL***")
'				f.Intrinsic.String.Build("Delete From GCG_6878_FMS_NEST Where NestID = '{0}'", v.Local.sRet, v.Local.sSQLa)
'				f.Intrinsic.UI.Msgbox("Are you sure you want to delete?", "Warning", 4, v.Local.iYes)
'				f.Intrinsic.Control.If(v.Local.iYes, =, 6)
'					f.ODBC.Connection!con.Execute(v.Local.sSQLa)
'				f.Intrinsic.Control.EndIf
'			f.Intrinsic.Control.EndIf
		f.ODBC.Connection!con.Close
		gui.F_Delete..Visible(True)
		'f.Intrinsic.Control.CallSub(cmdRefresh_Click)
	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.cmdDelete_Click.End

Program.Sub.UpdateLastScheduleNumber.Start
'update last shcedule number option with the one we just created

F.Intrinsic.Control.Try

V.Local.iSched.Declare(Long)
V.Local.sSchedule.Declare(String)
V.Local.sSQLc.Declare(String)

V.Local.iSched.Set(V.Args.SCHEDULE)

'option 400817 is last schedule number
F.Global.General.SaveOption(400817, "0000", "", "", "", "", V.Local.iSched, "")

'this option is stored in two places, need to update second
V.Local.sSchedule.Set(V.Local.iSched)
F.Intrinsic.String.Format(V.Local.sSchedule, "000000", V.Local.sSchedule)
F.Intrinsic.String.Build("Update Last_PO Set Last_PO_Num = '{0}' + substring(Last_PO_Num,7,1) Where Ass_Sys = 'SCH' and Ass_Sub_Sys = 'OPT'",V.Local.sSchedule,V.Local.sSQLc)
F.ODBC.Connection!Con.Execute(V.Local.sSQLc)

F.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.UpdateLastScheduleNumber.End

Program.Sub.display.Start
f.Intrinsic.Control.Try
	'Create empty table to load data
	f.Intrinsic.Control.CallSub(createDisplayDT)
	'Format grid.
	f.Intrinsic.Control.CallSub(loadGridProperties)
	'Deserialize
	f.Intrinsic.Control.CallSub(Deserialize)
	'Load data using refresh subroutine.
	f.Intrinsic.Control.CallSub(cmdRefresh_Click)
	'
	f.Intrinsic.Control.CallSub(loadContextMenu)
	'lanch screen
	gui.Form..Show
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.display.End

Program.Sub.Serialize.Start
v.Local.sSerialize.Declare
f.Intrinsic.Control.Try

f.Intrinsic.Control.If(v.DataTable.displayDT.Exists, =, False)
	f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.EndIf

gui.Form.GsGcDisplay.Serialize("displayGV", v.Local.sSerialize)
f.Global.Registry.AddValue(v.Caller.User, v.Caller.CompanyCode, "displayGV", 6878, 2000, False, "Serialize", False, 0, -999.0, 1/1/1980, 12:00:00 AM, v.Local.sSerialize)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.Serialize.End

Program.Sub.Deserialize.Start
v.Local.sSerialize.Declare
f.Intrinsic.Control.Try
	f.Global.Registry.ReadValue(v.Caller.User, v.Caller.CompanyCode, "displayGV", 6878, 0, 5, "", v.Local.sSerialize)
	f.Intrinsic.Control.If(v.Local.sSerialize, <>, "")
		f.ODBC.Connection!common.OpenCommonConnection
			f.ODBC.Connection!common.Execute("delete from GS_REGISTRY where REG_ID = '6878'")
		f.ODBC.Connection!common.Close
	f.Intrinsic.Control.EndIf
	
	f.Global.Registry.ReadValue(v.Caller.User, v.Caller.CompanyCode, "displayGV", "6878", 2000, 6, "", v.Local.sSerialize)
	f.Intrinsic.Control.If(v.Local.sSerialize.Trim, <>, "")
		gui.Form.GsGcDisplay.Deserialize(v.Local.sSerialize)
	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.Deserialize.End

Program.Sub.GridViewFilterToDataViewFilter.Start
'this sub is for converting the active filter string of a gridview into a dataview friendly version
'FILTER	-	The Active Filter String

'valid operators: =, >, <, >=, <=, <>, in, is null, not, like

F.Intrinsic.Control.Try

V.Local.sFilter.Declare(String)
V.Local.sRet.Declare(String)
V.Local.iCounter.Declare(Long)
V.Local.sFields.Declare(String)
V.Local.sTemp.Declare(String)
V.Local.sTemp2.Declare(String)
V.Local.sFindString.Declare(String)
V.Local.sReplaceString.Declare(String)
V.Local.sValues.Declare(String)
V.Local.sValueReturn.Declare(String)
V.Local.sFieldReturn.Declare(String)
V.Local.sValueRegEx.Declare(String, "\'[^']*\'")
V.Local.sFieldRegEx.Declare(String, "\[[A-Za-z0-9_-]+\]")
V.Local.sNumberRegEx.Declare(String, "-?[0-9]+(\.[0-9]+)?")
V.Local.sRegEx.Declare(String)
V.Local.sMatch.Declare(String)
V.Local.ilength.Declare(Long)
V.Local.sValueReturn2.Declare(String)

V.Local.sFilter.Set(V.Args.Filter)

'fix all IsNullOrEmpty
F.Intrinsic.String.Build("IsNullOrEmpty\({0}\)", V.Local.sFieldRegEx, V.Local.sRegEx)
F.Intrinsic.String.RegExMatch(V.Local.sFilter, V.Local.sRegEx, True, V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet.Trim, !=, "")
	F.Intrinsic.String.Split(V.Local.sRet, "@!@", V.Local.sRet)
	F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sRet.UBound, 1)
		
		'get match
		F.Intrinsic.String.Split(V.Local.sRet(V.Local.iCounter), "*!*", V.Local.sTemp)
		V.Local.sMatch.Set(V.Local.sTemp(1))
		
		'get the field, only one
		F.Intrinsic.String.RegExMatch(V.Local.sMatch, V.Local.sFieldRegEx, True, V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp, "*!*", V.Local.sTemp)
		V.Local.sFieldReturn.Set(V.Local.sTemp(1))
		
		'Replace
		F.Intrinsic.String.Build("({0} is Null or {0} = '')", V.Local.sFieldReturn, V.Local.sReplaceString)
		F.Intrinsic.String.Replace(V.Local.sFilter, V.Local.sMatch, V.Local.sReplaceString, V.Local.sFilter)
	F.Intrinsic.Control.Next(V.Local.iCounter)
F.Intrinsic.Control.EndIf

'fix all StartsWith
F.Intrinsic.String.Build("StartsWith\({0},\s*{1}\)", V.Local.sFieldRegEx, V.Local.sValueRegEx, V.Local.sRegEx)
F.Intrinsic.String.RegExMatch(V.Local.sFilter, V.Local.sRegEx, True, V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet.Trim, !=, "")
	F.Intrinsic.String.Split(V.Local.sRet, "@!@", V.Local.sRet)
	F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sRet.UBound, 1)
		
		'get match
		F.Intrinsic.String.Split(V.Local.sRet(V.Local.iCounter), "*!*", V.Local.sTemp)
		V.Local.sMatch.Set(V.Local.sTemp(1))
		
		'get the field, only one
		F.Intrinsic.String.RegExMatch(V.Local.sMatch, V.Local.sFieldRegEx, True, V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp, "*!*", V.Local.sTemp)
		V.Local.sFieldReturn.Set(V.Local.sTemp(1))
		
		'get the value, only one
		F.Intrinsic.String.RegExMatch(V.Local.sMatch, V.Local.sValueRegEx, True, V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp, "*!*", V.Local.sTemp)
		V.Local.sValueReturn.Set(V.Local.sTemp(1))
		F.Intrinsic.String.TrimChar(V.Local.sValueReturn, "'", V.Local.sValueReturn)
		
		'Replace
		F.Intrinsic.String.Build("{0} like '{1}%'", V.Local.sFieldReturn, V.Local.sValueReturn, V.Local.sReplaceString)
		F.Intrinsic.String.Replace(V.Local.sFilter, V.Local.sMatch, V.Local.sReplaceString, V.Local.sFilter)
	F.Intrinsic.Control.Next(V.Local.iCounter)
F.Intrinsic.Control.EndIf

'fix all EndsWith
F.Intrinsic.String.Build("EndsWith\({0},\s*{1}\)", V.Local.sFieldRegEx, V.Local.sValueRegEx, V.Local.sRegEx)
F.Intrinsic.String.RegExMatch(V.Local.sFilter, V.Local.sRegEx, True, V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet.Trim, !=, "")
	F.Intrinsic.String.Split(V.Local.sRet, "@!@", V.Local.sRet)
	F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sRet.UBound, 1)
		
		'get match
		F.Intrinsic.String.Split(V.Local.sRet(V.Local.iCounter), "*!*", V.Local.sTemp)
		V.Local.sMatch.Set(V.Local.sTemp(1))
		
		'get the field, only one
		F.Intrinsic.String.RegExMatch(V.Local.sMatch, V.Local.sFieldRegEx, True, V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp, "*!*", V.Local.sTemp)
		V.Local.sFieldReturn.Set(V.Local.sTemp(1))
		
		'get the value, only one
		F.Intrinsic.String.RegExMatch(V.Local.sMatch, V.Local.sValueRegEx, True, V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp, "*!*", V.Local.sTemp)
		V.Local.sValueReturn.Set(V.Local.sTemp(1))
		F.Intrinsic.String.TrimChar(V.Local.sValueReturn, "'", V.Local.sValueReturn)
		
		'Replace
		F.Intrinsic.String.Build("{0} like '%{1}'", V.Local.sFieldReturn, V.Local.sValueReturn, V.Local.sReplaceString)
		F.Intrinsic.String.Replace(V.Local.sFilter, V.Local.sMatch, V.Local.sReplaceString, V.Local.sFilter)
	F.Intrinsic.Control.Next(V.Local.iCounter)
F.Intrinsic.Control.EndIf

'fix all Contains
F.Intrinsic.String.Build("Contains\({0},\s*{1}\)", V.Local.sFieldRegEx, V.Local.sValueRegEx, V.Local.sRegEx)
F.Intrinsic.String.RegExMatch(V.Local.sFilter, V.Local.sRegEx, True, V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet.Trim, !=, "")
	F.Intrinsic.String.Split(V.Local.sRet, "@!@", V.Local.sRet)
	F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sRet.UBound, 1)
		
		'get match
		F.Intrinsic.String.Split(V.Local.sRet(V.Local.iCounter), "*!*", V.Local.sTemp)
		V.Local.sMatch.Set(V.Local.sTemp(1))
		
		'get the field, only one
		F.Intrinsic.String.RegExMatch(V.Local.sMatch, V.Local.sFieldRegEx, True, V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp, "*!*", V.Local.sTemp)
		V.Local.sFieldReturn.Set(V.Local.sTemp(1))
		
		'get the value, only one
		F.Intrinsic.String.RegExMatch(V.Local.sMatch, V.Local.sValueRegEx, True, V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp, "*!*", V.Local.sTemp)
		V.Local.sValueReturn.Set(V.Local.sTemp(1))
		F.Intrinsic.String.TrimChar(V.Local.sValueReturn, "'", V.Local.sValueReturn)
		
		'Replace
		F.Intrinsic.String.Build("{0} like '%{1}%'", V.Local.sFieldReturn, V.Local.sValueReturn, V.Local.sReplaceString)
		F.Intrinsic.String.Replace(V.Local.sFilter, V.Local.sMatch, V.Local.sReplaceString, V.Local.sFilter)
	F.Intrinsic.Control.Next(V.Local.iCounter)
F.Intrinsic.Control.EndIf

'fix between
F.Intrinsic.String.Build("{0} Between\({1}m?, {1}m?\)", V.Local.sFieldRegEx, V.Local.sNumberRegEx, V.Local.sRegEx)
F.Intrinsic.String.RegExMatch(V.Local.sFilter, V.Local.sRegEx, True, V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet.Trim, !=, "")
	F.Intrinsic.String.Split(V.Local.sRet, "@!@", V.Local.sRet)
	F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sRet.UBound, 1)
		
		'get match
		F.Intrinsic.String.Split(V.Local.sRet(V.Local.iCounter), "*!*", V.Local.sTemp)
		V.Local.sMatch.Set(V.Local.sTemp(1))
		
		'get the field, only one
		F.Intrinsic.String.RegExMatch(V.Local.sMatch, V.Local.sFieldRegEx, True, V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp, "*!*", V.Local.sTemp)
		V.Local.sFieldReturn.Set(V.Local.sTemp(1))
		
		'get the values, two
		F.Intrinsic.String.RegExMatch(V.Local.sMatch, V.Local.sNumberRegEx, True, V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp, "@!@", V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp(0), "*!*", V.Local.sTemp2)
		V.Local.sValueReturn.Set(V.Local.sTemp2(1))
		F.Intrinsic.String.Split(V.Local.sTemp(1), "*!*", V.Local.sTemp2)
		V.Local.sValueReturn2.Set(V.Local.sTemp2(1))
		
		'Replace
		F.Intrinsic.String.Build("({0} >= {1} and {0} <= {2})", V.Local.sFieldReturn, V.Local.sValueReturn, V.Local.sValueReturn2, V.Local.sReplaceString)
		F.Intrinsic.String.Replace(V.Local.sFilter, V.Local.sMatch, V.Local.sReplaceString, V.Local.sFilter)
	F.Intrinsic.Control.Next(V.Local.iCounter)
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.AddRV("FILTER", V.Local.sFilter)

F.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.GridViewFilterToDataViewFilter.End

Program.Sub.GsGcDisplay_ColumnFilterChanged.Start
f.Intrinsic.Control.Try
	v.Global.sFilter.Set(v.Args.ActiveFilterExpression)
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.GsGcDisplay_ColumnFilterChanged.End

Program.Sub.cmdFlexSched_Click.Start
f.Intrinsic.Control.Try
'check if rows are selected.
'build a save table with the selected rows for updating custom table.
'build Issue File for callwrapper.
'Run stand alone issue.
'Update issued rows into the custom table, updating quantity issued and issue flag.

v.Local.iCnt.Declare
v.Local.sSeq.Declare

v.Local.sReceiptLine.Declare
v.Local.sText.Declare
v.Local.sFilePath.Declare

v.Local.sPart.Declare
v.Local.sRev.Declare
v.Local.sCost.Declare
v.Local.sBin.Declare
v.Local.sTotalWeight.Declare
v.Local.sDateTD.Declare
v.Local.iIncrement.Declare
V.Local.sIncrement.Declare
v.Local.sScheduleNumber.Declare

v.Local.sLoc.Declare
v.Local.sPartFull.Declare
V.Local.sWorkCenter.Declare
V.Local.sMSeq.Declare

v.Local.sSQLb.Declare
v.Local.iRet.Declare

v.Local.fOnhand.Declare

v.Local.sNewSeq.Declare

f.Intrinsic.Control.BlockEvents
'Check dv is closed.
f.Intrinsic.Control.If(v.DataView.displayDT!dvSelected.Exists)
	f.Data.DataView.Close("displayDT", "dvSelected")
f.Intrinsic.Control.EndIf

f.Intrinsic.Control.If(v.DataView.displayDT!dvSCheckIssue.Exists)
	f.Data.DataView.Close("displayDT", "dvSCheckIssue")
f.Intrinsic.Control.EndIf
'Create DV sloc
f.Data.Datatable.AcceptChanges("displayDT")

f.Data.DataView.Create("displayDT", "dvSCheckIssue", 22, "SelectCol = 'True' and Bin <> '' and Trim(FlexID) <> ''", )
f.Intrinsic.Control.If(v.DataView.displayDT!dvSCheckIssue.RowCount, >, 1)
	f.Intrinsic.Control.UnBlockEvents
	f.Intrinsic.UI.Msgbox("Rows selected have lines that already have been added to a Flex Schedule.")
	
	f.Intrinsic.Control.ExitSub
	
f.Intrinsic.Control.EndIf

f.Data.DataView.Create("displayDT", "dvSelected", 22, "SelectCol = 'True' and Bin <> ''", )
f.Intrinsic.Control.If(v.DataView.displayDT!dvSelected.RowCount, <, 1)
	f.Intrinsic.Control.UnBlockEvents
	f.Intrinsic.UI.Msgbox("Select Rows to issue")
	f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.EndIf
'Close Seq Prep
f.Data.DataTable.Create("dtCloseSeq")
f.Data.DataTable.AddColumn("dtCloseSeq", "WO", "String")
f.Data.DataTable.AddColumn("dtCloseSeq", "Sux", "String")
f.Data.DataTable.AddColumn("dtCloseSeq", "Seq", "String")
f.Intrinsic.String.Format(v.Ambient.Date, "YYYYMMDD", v.Local.sDateTD)
F.Intrinsic.Control.CallSub(GetNextFlexSchedule)
V.Local.sScheduleNumber.Set(V.Args.Schedule)
'Get Material line on each wo-suff
f.ODBC.Connection!con.OpenCompanyConnection
 	f.Intrinsic.Control.For(v.Local.iCnt, 0, v.DataView.displayDT!dvSelected.RowCount--, 1)
 		'Add increment
		F.Intrinsic.Math.Add(V.Local.iIncrement.long,1,V.Local.iIncrement)
		F.Intrinsic.String.Format(V.Local.iIncrement,"000000",V.Local.sIncrement)
		f.Data.DataView.SetValue("displayDT", "dvSelected", -1, "FlexID", v.Local.sScheduleNumber)
		'Get Mat Seq
		f.Intrinsic.String.Build("Select top 1 seq from V_job_Operations where job = '{0}' and suffix = '{1}' and seq < '{2}' and LMO = 'M' order by seq desc", v.DataView.displayDT!dvSelected(v.Local.iCnt).Job!FieldValTrim, v.DataView.displayDT!dvSelected(v.Local.iCnt).Suffix!FieldValTrim, v.DataView.displayDT!dvSelected(v.Local.iCnt).Seq!FieldValTrim, v.Local.sSQLb)
		f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQLb, v.Local.sSeq)
		f.Intrinsic.String.Build("Select top 1 Part from V_job_Operations where job = '{0}' and suffix = '{1}' and seq = '{2}' order by seq desc", v.DataView.displayDT!dvSelected(v.Local.iCnt).Job!FieldValTrim, v.DataView.displayDT!dvSelected(v.Local.iCnt).Suffix!FieldValTrim, v.DataView.displayDT!dvSelected(v.Local.iCnt).Seq!FieldValTrim, v.Local.sSQLb)
		f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQLb, v.Local.sWorkCenter)
		'Get New Seq
		f.Intrinsic.String.Build("Select top 1 seq from V_job_Operations where job = '{0}' and suffix = '{1}' and seq = '001500' order by seq desc", v.DataView.displayDT!dvSelected(v.Local.iCnt).Job!FieldValTrim, v.DataView.displayDT!dvSelected(v.Local.iCnt).Suffix!FieldValTrim,  v.Local.sSQLb)
		f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQLb, v.Local.sNewSeq)
		f.Intrinsic.Control.If(v.Local.sNewSeq.Trim, <>, "001500")
			'Mod AA - Check for Seq 002000
			f.Intrinsic.String.Build("Select top 1 seq from V_job_Operations where job = '{0}' and suffix = '{1}' and seq = '002000' order by seq desc", v.DataView.displayDT!dvSelected(v.Local.iCnt).Job!FieldValTrim, v.DataView.displayDT!dvSelected(v.Local.iCnt).Suffix!FieldValTrim,  v.Local.sSQLb)
			f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQLb, v.Local.sNewSeq)
			f.Intrinsic.Control.If(v.Local.sNewSeq.Trim, <>, "001500")
				v.Local.sNewSeq.Set(v.DataView.displayDT!dvSelected(v.Local.iCnt).Seq!FieldValTrim)
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf
		'Get Cost 
		f.Intrinsic.String.Build("Select top 1 amt_Cost from Inventory_Mstr where Part = '{0}'", v.DataView.displayDT!dvSelected(v.Local.iCnt).Material!FieldValTrim, v.Local.sSQLb)
		f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQLb, v.Local.sCost)
		'Check Qty On Hand
		f.Intrinsic.String.Build("select QTY_Onhand from V_Inventory_All where Part = '{0}'", v.Local.sPart, v.Local.sSQLb)
		f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQLb, v.Local.fOnhand)
		
		'Get Cost 
		v.Local.sBin.Set(v.DataView.displayDT!dvSelected(v.Local.iCnt).Bin!FieldValTrim)
		'Check is not empty
		f.Intrinsic.Control.If(v.Local.sSeq.Trim, =, "")
			f.Intrinsic.Control.GoTo("Next")
		f.Intrinsic.Control.EndIf
		'Build Issue
		'Part
		'v.Local.sPart.Set()
		f.Intrinsic.String.RPad(v.DataView.displayDT!dvSelected(v.Local.iCnt).Material!FieldValTrim, " ", 20, v.Local.sPartFull)
		f.Intrinsic.String.Right(v.Local.sPartFull, 3, v.Local.sRev)
		f.Intrinsic.String.Left(v.Local.sPartFull, 17, v.Local.sPart)
		'Total Weight
		'f.Intrinsic.String.Format(v.DataView.displayDT!dvSelected(v.Local.iCnt).totalWeight!FieldValTrim, "0.0", v.Local.sTotalWeight)
		v.Local.sTotalWeight.Set(v.DataView.displayDT!dvSelected(v.Local.iCnt).totalWeight!FieldValTrim)
		'Issue Material
		f.Intrinsic.Control.Label("Next")

		F.Data.DataTable.AddRow("6000", "SchedNumber", V.Local.sScheduleNumber, "SchedIncrement", V.Local.sIncrement, "MatWO", v.DataView.displayDT!dvSelected(v.Local.iCnt).Job!FieldValTrim, "MatSuff", v.DataView.displayDT!dvSelected(v.Local.iCnt).Suffix!FieldValTrim, "MatSeq", V.Local.sSeq, "LabWO", v.DataView.displayDT!dvSelected(v.Local.iCnt).Job!FieldValTrim, "LabSuff", v.DataView.displayDT!dvSelected(v.Local.iCnt).Suffix!FieldValTrim, "LabSeq", v.Local.sNewSeq, "LabWorkCenter", V.Local.sWorkCenter, "LabWOPart", V.Local.sPartFull, "LabWOLoc", V.Local.sLoc, "SchedFromDate", V.Ambient.Date.FormatMMDDYY)
		
	f.Intrinsic.Control.Next(v.Local.iCnt)

	'upload
	F.Intrinsic.Control.CallSub(6000Sync)
	
	F.Intrinsic.Control.CallSub(UpdateLastScheduleNumber, "SCHEDULE", V.Local.sScheduleNumber)
	
	F.Data.DataTable.AddRow("900300", "StartDate", "000000", "EndDate", "000000", "StartFSNum", V.Local.sScheduleNumber, "StartFSSuffix", "000", "EndFSNum", V.Local.sScheduleNumber, "EndFSSuffix", "000", "ShowMatl", "Y", "UseExtBarcode", "Y")
	F.Intrinsic.Control.CallSub(900300Sync)
	
	f.Intrinsic.UI.Sleep(10)
	'
	'f.Data.DataView.SetValue("displayDT", "dvSelected", v.Local.iCnt, "Issued", "Y")
	'Change save to only affected 
	f.Data.DataView.ToDataTable("displayDT", "dvSelected", "saveDT")
	f.Data.Datatable.RemoveColumn("saveDT", "SelectCol")	
	f.Data.Datatable.SaveToDB("saveDT", "con", "GCG_6878_FMS_NEST", "Job*!*Suffix*!*Seq*!*NestID", 256)
	
'	'Close Sequences
'	f.Intrinsic.Control.For(v.Local.iCnt, 0, v.DataTable.dtCloseSeq.RowCount--, 1)
'		F.Global.Callwrapper.New("Test","Manufacturing.CloseWorkOrderSequence")
'		F.Global.Callwrapper.SetProperty("Test","BeginningWorkOrder", v.DataTable.dtCloseSeq(v.Local.iCnt).WO!FieldValTrim)
'		F.Global.Callwrapper.SetProperty("Test","BeginningWorkOrderSuffix", v.DataTable.dtCloseSeq(v.Local.iCnt).WO!FieldValTrim)
'		F.Global.Callwrapper.SetProperty("Test","WorkOrderSequence", v.DataTable.dtCloseSeq(v.Local.iCnt).WO!FieldValTrim)
'		F.Global.Callwrapper.SetProperty("Test","CloseDate", v.Local.sDateTD)
'		F.Global.CallWrapper.Run("Test")	
'	f.Intrinsic.Control.Next(v.Local.iCnt)
	f.Data.DataTable.Close("dtCloseSeq")
	f.Data.Datatable.Close("saveDT")
f.ODBC.Connection!con.Close
f.Intrinsic.Control.UnBlockEvents
f.Intrinsic.Control.CallSub("cmdRefresh_Click")
'f.Intrinsic.UI.Msgbox("Issue Complete")

f.Intrinsic.Control.Catch
	f.ODBC.Connection!con.Close
	f.Intrinsic.Control.UnBlockEvents
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.cmdFlexSched_Click.End

Program.Sub.F_Delete_UnLoad.Start
f.Intrinsic.Control.Try
	f.Data.DataTable.DeleteRow("deleteDT")
	f.Data.DataTable.AcceptChanges("deleteDT")
	gui.F_Delete..Visible(False)
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.F_Delete_UnLoad.End

Program.Sub.cmdSelAll_Click.Start
f.Intrinsic.Control.Try
	f.Intrinsic.Control.If(v.Global.bAll)
		f.Data.DataTable.SetValue("deleteDT", -1, "SELECTCOL", False)
		v.Global.bAll.Set(False)
	f.Intrinsic.Control.Else
		f.Data.DataTable.SetValue("deleteDT", -1, "SELECTCOL", True)
		v.Global.bAll.Set(True)
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.cmdSelAll_Click.End

Program.Sub.cmdSelFil_Click.Start
V.Local.sJobs.Declare(String)
V.Local.sMessage.Declare(String)
V.Local.iRet.Declare(Long)
V.Local.sFilter.Declare(String)
'V.Local.sSQLf.Declare(String)
f.Intrinsic.Control.Try

 
f.Intrinsic.Control.If(v.Global.bFill)
	F.Intrinsic.Control.CallSub(GridViewFilterToDataViewFilterDelete, "FILTER", V.Global.sFilterDelete)
	f.Data.DataView.Create("deleteDT","SetVw",22,V.Args.Filter,"")
	f.Data.DataView.SetValue("deleteDT","SetVw",-1,"SelectCol",False)
	f.Data.DataView.Close("deleteDT","SetVw")
	'F.Intrinsic.Control.CallSub(LoadTotals, "SELECTED_OVERRIDE", -1)	
	v.Global.bAll.Set(False)
f.Intrinsic.Control.Else
	F.Intrinsic.Control.CallSub(GridViewFilterToDataViewFilterDelete, "FILTER", V.Global.sFilterDelete)
	f.Data.DataView.Create("deleteDT","SetVw",22,V.Args.Filter,"")
	f.Data.DataView.SetValue("deleteDT","SetVw",-1,"SelectCol",True)
	f.Data.DataView.Close("deleteDT","SetVw")
	'F.Intrinsic.Control.CallSub(LoadTotals, "SELECTED_OVERRIDE", -1)
	v.Global.bAll.Set(True)
f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.cmdSelFil_Click.End

Program.Sub.cmdDelete_Click1.Start
v.Local.iCnt.Declare
v.Local.iYes.Declare
v.Local.sRet.Declare
v.Local.sSQL.Declare
f.Intrinsic.Control.Try
	f.Intrinsic.UI.Msgbox("Are you sure you want to delete?", "Warning", 4, v.Local.iYes)
	'Loop Through Selected
	f.ODBC.Connection!con.OpenCompanyConnection	
		f.Intrinsic.Control.For(v.Local.iCnt, 0, v.DataView.deleteDT!selectDV.RowCount--, 1)
			v.Local.sRet.Set(v.DataView.deleteDT!selectDV(v.Local.iCnt).NestID!FieldValTrim)
			f.Intrinsic.String.Build("Delete From GCG_6878_FMS_NEST Where NestID = '{0}'", v.Local.sRet, v.Local.sSQL)		
			f.Intrinsic.Control.If(v.Local.iYes, =, 6)
				f.ODBC.Connection!con.Execute(v.Local.sSQL)
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.Next(v.Local.iCnt)
	f.ODBC.Connection!con.Close
	f.Data.DataTable.DeleteRow("deleteDT")
	f.Data.DataTable.AcceptChanges("deleteDT")
	gui.F_Delete..Visible(False)
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.cmdDelete_Click1.End

Program.Sub.GridViewFilterToDataViewFilterDelete.Start
'this sub is for converting the active filter string of a gridview into a dataview friendly version
'FILTER	-	The Active Filter String

'valid operators: =, >, <, >=, <=, <>, in, is null, not, like

F.Intrinsic.Control.Try

V.Local.sFilter.Declare(String)
V.Local.sRet.Declare(String)
V.Local.iCounter.Declare(Long)
V.Local.sFields.Declare(String)
V.Local.sTemp.Declare(String)
V.Local.sTemp2.Declare(String)
V.Local.sFindString.Declare(String)
V.Local.sReplaceString.Declare(String)
V.Local.sValues.Declare(String)
V.Local.sValueReturn.Declare(String)
V.Local.sFieldReturn.Declare(String)
V.Local.sValueRegEx.Declare(String, "\'[^']*\'")
V.Local.sFieldRegEx.Declare(String, "\[[A-Za-z0-9_-]+\]")
V.Local.sNumberRegEx.Declare(String, "-?[0-9]+(\.[0-9]+)?")
V.Local.sRegEx.Declare(String)
V.Local.sMatch.Declare(String)
V.Local.ilength.Declare(Long)
V.Local.sValueReturn2.Declare(String)

V.Local.sFilter.Set(V.Args.Filter)

'fix all IsNullOrEmpty
F.Intrinsic.String.Build("IsNullOrEmpty\({0}\)", V.Local.sFieldRegEx, V.Local.sRegEx)
F.Intrinsic.String.RegExMatch(V.Local.sFilter, V.Local.sRegEx, True, V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet.Trim, !=, "")
	F.Intrinsic.String.Split(V.Local.sRet, "@!@", V.Local.sRet)
	F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sRet.UBound, 1)
		
		'get match
		F.Intrinsic.String.Split(V.Local.sRet(V.Local.iCounter), "*!*", V.Local.sTemp)
		V.Local.sMatch.Set(V.Local.sTemp(1))
		
		'get the field, only one
		F.Intrinsic.String.RegExMatch(V.Local.sMatch, V.Local.sFieldRegEx, True, V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp, "*!*", V.Local.sTemp)
		V.Local.sFieldReturn.Set(V.Local.sTemp(1))
		
		'Replace
		F.Intrinsic.String.Build("({0} is Null or {0} = '')", V.Local.sFieldReturn, V.Local.sReplaceString)
		F.Intrinsic.String.Replace(V.Local.sFilter, V.Local.sMatch, V.Local.sReplaceString, V.Local.sFilter)
	F.Intrinsic.Control.Next(V.Local.iCounter)
F.Intrinsic.Control.EndIf

'fix all StartsWith
F.Intrinsic.String.Build("StartsWith\({0},\s*{1}\)", V.Local.sFieldRegEx, V.Local.sValueRegEx, V.Local.sRegEx)
F.Intrinsic.String.RegExMatch(V.Local.sFilter, V.Local.sRegEx, True, V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet.Trim, !=, "")
	F.Intrinsic.String.Split(V.Local.sRet, "@!@", V.Local.sRet)
	F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sRet.UBound, 1)
		
		'get match
		F.Intrinsic.String.Split(V.Local.sRet(V.Local.iCounter), "*!*", V.Local.sTemp)
		V.Local.sMatch.Set(V.Local.sTemp(1))
		
		'get the field, only one
		F.Intrinsic.String.RegExMatch(V.Local.sMatch, V.Local.sFieldRegEx, True, V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp, "*!*", V.Local.sTemp)
		V.Local.sFieldReturn.Set(V.Local.sTemp(1))
		
		'get the value, only one
		F.Intrinsic.String.RegExMatch(V.Local.sMatch, V.Local.sValueRegEx, True, V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp, "*!*", V.Local.sTemp)
		V.Local.sValueReturn.Set(V.Local.sTemp(1))
		F.Intrinsic.String.TrimChar(V.Local.sValueReturn, "'", V.Local.sValueReturn)
		
		'Replace
		F.Intrinsic.String.Build("{0} like '{1}%'", V.Local.sFieldReturn, V.Local.sValueReturn, V.Local.sReplaceString)
		F.Intrinsic.String.Replace(V.Local.sFilter, V.Local.sMatch, V.Local.sReplaceString, V.Local.sFilter)
	F.Intrinsic.Control.Next(V.Local.iCounter)
F.Intrinsic.Control.EndIf

'fix all EndsWith
F.Intrinsic.String.Build("EndsWith\({0},\s*{1}\)", V.Local.sFieldRegEx, V.Local.sValueRegEx, V.Local.sRegEx)
F.Intrinsic.String.RegExMatch(V.Local.sFilter, V.Local.sRegEx, True, V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet.Trim, !=, "")
	F.Intrinsic.String.Split(V.Local.sRet, "@!@", V.Local.sRet)
	F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sRet.UBound, 1)
		
		'get match
		F.Intrinsic.String.Split(V.Local.sRet(V.Local.iCounter), "*!*", V.Local.sTemp)
		V.Local.sMatch.Set(V.Local.sTemp(1))
		
		'get the field, only one
		F.Intrinsic.String.RegExMatch(V.Local.sMatch, V.Local.sFieldRegEx, True, V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp, "*!*", V.Local.sTemp)
		V.Local.sFieldReturn.Set(V.Local.sTemp(1))
		
		'get the value, only one
		F.Intrinsic.String.RegExMatch(V.Local.sMatch, V.Local.sValueRegEx, True, V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp, "*!*", V.Local.sTemp)
		V.Local.sValueReturn.Set(V.Local.sTemp(1))
		F.Intrinsic.String.TrimChar(V.Local.sValueReturn, "'", V.Local.sValueReturn)
		
		'Replace
		F.Intrinsic.String.Build("{0} like '%{1}'", V.Local.sFieldReturn, V.Local.sValueReturn, V.Local.sReplaceString)
		F.Intrinsic.String.Replace(V.Local.sFilter, V.Local.sMatch, V.Local.sReplaceString, V.Local.sFilter)
	F.Intrinsic.Control.Next(V.Local.iCounter)
F.Intrinsic.Control.EndIf

'fix all Contains
F.Intrinsic.String.Build("Contains\({0},\s*{1}\)", V.Local.sFieldRegEx, V.Local.sValueRegEx, V.Local.sRegEx)
F.Intrinsic.String.RegExMatch(V.Local.sFilter, V.Local.sRegEx, True, V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet.Trim, !=, "")
	F.Intrinsic.String.Split(V.Local.sRet, "@!@", V.Local.sRet)
	F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sRet.UBound, 1)
		
		'get match
		F.Intrinsic.String.Split(V.Local.sRet(V.Local.iCounter), "*!*", V.Local.sTemp)
		V.Local.sMatch.Set(V.Local.sTemp(1))
		
		'get the field, only one
		F.Intrinsic.String.RegExMatch(V.Local.sMatch, V.Local.sFieldRegEx, True, V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp, "*!*", V.Local.sTemp)
		V.Local.sFieldReturn.Set(V.Local.sTemp(1))
		
		'get the value, only one
		F.Intrinsic.String.RegExMatch(V.Local.sMatch, V.Local.sValueRegEx, True, V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp, "*!*", V.Local.sTemp)
		V.Local.sValueReturn.Set(V.Local.sTemp(1))
		F.Intrinsic.String.TrimChar(V.Local.sValueReturn, "'", V.Local.sValueReturn)
		
		'Replace
		F.Intrinsic.String.Build("{0} like '%{1}%'", V.Local.sFieldReturn, V.Local.sValueReturn, V.Local.sReplaceString)
		F.Intrinsic.String.Replace(V.Local.sFilter, V.Local.sMatch, V.Local.sReplaceString, V.Local.sFilter)
	F.Intrinsic.Control.Next(V.Local.iCounter)
F.Intrinsic.Control.EndIf

'fix between
F.Intrinsic.String.Build("{0} Between\({1}m?, {1}m?\)", V.Local.sFieldRegEx, V.Local.sNumberRegEx, V.Local.sRegEx)
F.Intrinsic.String.RegExMatch(V.Local.sFilter, V.Local.sRegEx, True, V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet.Trim, !=, "")
	F.Intrinsic.String.Split(V.Local.sRet, "@!@", V.Local.sRet)
	F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sRet.UBound, 1)
		
		'get match
		F.Intrinsic.String.Split(V.Local.sRet(V.Local.iCounter), "*!*", V.Local.sTemp)
		V.Local.sMatch.Set(V.Local.sTemp(1))
		
		'get the field, only one
		F.Intrinsic.String.RegExMatch(V.Local.sMatch, V.Local.sFieldRegEx, True, V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp, "*!*", V.Local.sTemp)
		V.Local.sFieldReturn.Set(V.Local.sTemp(1))
		
		'get the values, two
		F.Intrinsic.String.RegExMatch(V.Local.sMatch, V.Local.sNumberRegEx, True, V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp, "@!@", V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp(0), "*!*", V.Local.sTemp2)
		V.Local.sValueReturn.Set(V.Local.sTemp2(1))
		F.Intrinsic.String.Split(V.Local.sTemp(1), "*!*", V.Local.sTemp2)
		V.Local.sValueReturn2.Set(V.Local.sTemp2(1))
		
		'Replace
		F.Intrinsic.String.Build("({0} >= {1} and {0} <= {2})", V.Local.sFieldReturn, V.Local.sValueReturn, V.Local.sValueReturn2, V.Local.sReplaceString)
		F.Intrinsic.String.Replace(V.Local.sFilter, V.Local.sMatch, V.Local.sReplaceString, V.Local.sFilter)
	F.Intrinsic.Control.Next(V.Local.iCounter)
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.AddRV("FILTER", V.Local.sFilter)

F.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.GridViewFilterToDataViewFilterDelete.End

Program.Sub.GsGcDelete_ColumnFilterChanged.Start
f.Intrinsic.Control.Try
	v.Global.sFilterDelete.Set(v.Args.ActiveFilterExpression)
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.GsGcDelete_ColumnFilterChanged.End

Program.Sub.GsGcDelete_CellValueChanged.Start
Program.Sub.GsGcDelete_CellValueChanged.End

Program.Sub.GsGcDelete_RowCellClick.Start
v.Local.sCol.Declare
v.Local.sMat.Declare
v.Local.sRet.Declare
v.Local.sSQLe.Declare
v.Local.bSelect.Declare
f.Intrinsic.Control.Try
	v.Local.sCol.Set(v.Args.Column)
	f.Intrinsic.Control.If(v.Local.sCol.UCase, =, "SELECTCOL")
		gui.F_Delete.GsGcDelete.GetCellValueByColumnName("deleteGV", "SELECTCOL", v.Args.RowIndex, v.Local.bSelect)
		gui.F_Delete.GsGcDelete.SetCellValueByColumnName("deleteGV", "SELECTCOL", v.Args.RowIndex, v.Local.bSelect.Not)
	f.Intrinsic.Control.EndIf
	f.Data.DataTable.AcceptChanges("displayDT")
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.GsGcDelete_RowCellClick.End

Program.Sub.Comments.Start
${$5$}$20.1.8523.27591$}$1
${$6$}$aanazco$}$20230606125722608$}$7aQAV3Tor/tR9bkuakHbuzQlHVuXCGOzuHsgUVyN91wip9kiCsc9/MiO4BfLwmd0XMB1Vt48VnU=
Program.Sub.Comments.End